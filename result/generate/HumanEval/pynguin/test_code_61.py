# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import code_61 as module_0
import builtins as module_1


def test_case_0():
    str_0 = "~g|"
    var_0 = module_0.correct_bracketing(str_0)
    assert var_0 is False


def test_case_1():
    str_0 = ""
    var_0 = module_0.correct_bracketing(str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ""
    var_0 = module_0.correct_bracketing(str_0)
    assert var_0 is True
    str_1 = "I"
    var_1 = module_0.correct_bracketing(str_1)
    assert var_1 is False
    var_2 = module_0.correct_bracketing(str_1)
    assert var_2 is False
    str_2 = "@7=VcTG8@ZCs~+Y"
    var_3 = module_0.correct_bracketing(str_2)
    assert var_3 is False
    str_3 = "Bf>nbqX~q`/i"
    var_4 = module_0.correct_bracketing(str_3)
    assert var_4 is False
    str_4 = 'hD\rdy3epNNP"6'
    var_5 = module_0.correct_bracketing(str_4)
    assert var_5 is False
    var_6 = module_0.correct_bracketing(str_2)
    assert var_6 is False
    str_5 = "\tv9Zi^<wV/ryiU"
    str_6 = "(FR2`\\"
    var_7 = module_0.correct_bracketing(str_6)
    assert var_7 is False
    var_8 = module_0.correct_bracketing(str_6)
    assert var_8 is False
    var_9 = module_0.correct_bracketing(str_5)
    assert var_9 is False
    var_10 = module_0.correct_bracketing(str_2)
    assert var_10 is False
    module_1.object(**var_10)
