# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import code_129 as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "// !&P)LP\x0bi[NFA7#R"
    module_0.minPath(str_0, str_0)


def test_case_1():
    bool_0 = True
    tuple_0 = ()
    var_0 = module_0.minPath(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.minPath(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ";"
    module_0.minPath(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xb3=\x01^\xfa\xe6\xaf\rG.\xe6\x07\xea\xab"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [bytes_0, list_0, list_0, bytes_0]
    module_0.minPath(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.minPath(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 1830
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    int_1 = -4016
    tuple_0 = (bool_0, bool_0, int_1)
    tuple_1 = (dict_0, int_0, tuple_0)
    tuple_2 = (int_0, int_0, tuple_1)
    tuple_3 = (tuple_2,)
    var_0 = module_0.minPath(tuple_3, int_0)
    bytes_0 = b"\x19\x95\xe0\x0f\xf5B\xbf;\xcc\x1c\xf2\xc1"
    module_0.minPath(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xb3=\x01^\xfa\xe6\xaf\rG.\xe6\x07\xea\xab"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.minPath(list_0, bytes_0)
