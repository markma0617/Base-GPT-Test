# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import code_157 as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.right_angle_triangle(bool_0, bool_0, bool_0)
    assert var_0 is True
    var_1 = module_0.right_angle_triangle(bool_0, bool_0, bool_0)
    bool_1 = True
    bool_2 = False
    int_0 = 1303
    tuple_0 = (bool_1, var_1, bool_2, int_0)
    module_0.right_angle_triangle(var_0, tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "#q~ko\tI(@`LiW>^oRt1\r"
    float_0 = -2157.846
    var_0 = module_0.right_angle_triangle(float_0, float_0, float_0)
    assert var_0 is False
    module_0.right_angle_triangle(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x98\xff\x84\xfa\x82\x83+\xc97\xb8\xce\x8a&\xafK\xb8"
    module_0.right_angle_triangle(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.right_angle_triangle(bool_0, bool_0, bool_0)
    assert var_0 is True
    var_1 = module_0.right_angle_triangle(bool_0, var_0, var_0)
    assert var_1 is True
    var_2 = module_0.right_angle_triangle(bool_0, bool_0, bool_0)
    var_3 = module_0.right_angle_triangle(bool_0, var_2, var_2)
    assert var_3 is True
    var_4 = module_0.right_angle_triangle(var_1, var_3, var_1)
    assert var_4 is False
    var_5 = module_0.right_angle_triangle(var_1, var_1, var_4)
    assert var_5 is True
    var_6 = module_0.right_angle_triangle(var_3, var_2, bool_0)
    assert var_6 is True
    none_type_0 = None
    module_0.right_angle_triangle(bool_0, none_type_0, var_3)
