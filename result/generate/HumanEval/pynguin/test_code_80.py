# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import code_80 as module_0


def test_case_0():
    dict_0 = {}
    var_0 = module_0.is_happy(dict_0)
    assert var_0 is False
    var_1 = module_0.is_happy(dict_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "\tsU6GxkX\x0b'"
    var_0 = module_0.is_happy(str_0)
    assert var_0 is True
    none_type_0 = None
    module_0.is_happy(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -281
    module_0.is_happy(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    var_0 = module_0.is_happy(tuple_0)
    assert var_0 is False
    module_0.is_happy(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "c\x0bjf$$#X9"
    var_0 = module_0.is_happy(str_0)
    assert var_0 is False
    module_0.is_happy(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    tuple_0 = ()
    bool_1 = False
    int_0 = -3241
    tuple_1 = (bool_0, tuple_0, bool_1, int_0)
    var_0 = module_0.is_happy(tuple_1)
    assert var_0 is False
    str_0 = "dxb"
    var_1 = module_0.is_happy(str_0)
    assert var_1 is True
    var_2 = module_0.is_happy(str_0)
    assert var_2 is True
    var_3 = module_0.is_happy(str_0)
    assert var_3 is True
    module_0.is_happy(var_0)
