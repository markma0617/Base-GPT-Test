# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import code_40 as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xa1"
    list_0 = []
    var_0 = module_0.triples_sum_to_zero(list_0)
    var_1 = module_0.triples_sum_to_zero(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.triples_sum_to_zero(none_type_0)


def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    var_0 = module_0.triples_sum_to_zero(list_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "\n}-RLT#13g<B\x0b-WHB["
    none_type_0 = None
    str_1 = '[/vf"\x0b{BY\no'
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    var_0 = module_0.triples_sum_to_zero(str_1)
    assert var_0 is False
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.triples_sum_to_zero(list_0)
    assert var_0 is True
    var_1 = module_0.triples_sum_to_zero(list_0)
    assert var_1 is True
    var_2 = module_0.triples_sum_to_zero(list_0)
    assert var_2 is True
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    var_3 = module_0.triples_sum_to_zero(list_1)
    assert var_3 is True
    var_4 = module_0.triples_sum_to_zero(list_0)
    assert var_4 is True
    var_5 = module_0.triples_sum_to_zero(list_1)
    assert var_5 is True
    module_0.triples_sum_to_zero(var_5)
