# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import code_63 as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.fibfib(bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = 165 + 1042.649218j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.fibfib(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    bool_1 = True
    var_0 = module_0.fibfib(bool_1)
    assert var_0 == 0
    var_1 = module_0.fibfib(var_0)
    assert var_1 == 0
    var_2 = module_0.fibfib(bool_0)
    assert var_2 == 0
    var_3 = module_0.fibfib(bool_0)
    assert var_3 == 0
    int_0 = -1908
    module_0.fibfib(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.fibfib(bool_0)
    assert var_0 == 0
    var_1 = module_0.fibfib(bool_0)
    assert var_1 == 0
    var_2 = module_0.fibfib(bool_0)
    assert var_2 == 0
    var_3 = module_0.fibfib(bool_0)
    assert var_3 == 0
    var_4 = module_0.fibfib(var_3)
    object_0 = module_1.object()
    var_5 = module_0.fibfib(var_2)
    var_6 = module_0.fibfib(var_4)
    assert var_6 == 0
    var_7 = module_0.fibfib(var_3)
    int_0 = 1394
    bool_1 = True
    var_8 = module_0.fibfib(bool_1)
    assert var_8 == 0
    var_9 = module_0.fibfib(var_4)
    assert var_9 == 0
    bool_2 = True
    var_10 = module_0.fibfib(bool_2)
    assert var_10 == 0
    int_1 = 2
    var_11 = module_0.fibfib(int_1)
    assert var_11 == 1
    var_12 = module_0.fibfib(var_9)
    module_0.fibfib(int_0)
